// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_schema.down.sql (30B)
// 000001_init_schema.up.sql (760B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xcf\x2f\xca\xce\x2f\x2d\x29\xb6\x06\x04\x00\x00\xff\xff\x77\x91\x09\x20\x1e\x00\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x5b, 0xb3, 0x69, 0x46, 0x67, 0xaa, 0x7e, 0xa7, 0x70, 0x8f, 0x79, 0x88, 0x1e, 0x36, 0x4b, 0xdd, 0x1, 0x7, 0xa9, 0xa9, 0x82, 0x76, 0x77, 0x72, 0xc2, 0xf, 0x85, 0x7, 0xe0, 0x20, 0xd8}}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x9e\x56\x3d\xb4\x12\xe5\xc4\x2d\xe2\xe0\xa6\x93\x10\x91\xd8\x91\x63\xab\x5d\x2e\x91\x97\x98\x6e\xa0\x69\x42\xec\x80\xf8\x7b\xd4\x84\x4d\x01\x2d\x62\x8f\x9e\x79\x6f\xe6\x79\xde\xdb\x51\x92\xf2\x30\x88\x24\x31\x45\xa0\xa3\x22\x5e\xa6\x82\x23\x8d\xc1\x85\x02\x1d\xd3\x52\x95\xb8\x1b\xc7\xa6\xde\x76\xce\xf5\x77\x0b\x56\x48\x48\x2a\x32\x16\x11\x62\xcd\x23\x75\x65\xf9\xa1\x39\x9d\xec\x50\x39\xeb\x2b\xdf\xb4\xd6\x79\xd3\xf6\xeb\x0d\x24\x29\x2d\x79\x09\x25\xd3\x24\x21\x09\x56\x62\xb5\xc2\xb4\x1b\x9c\x0e\xaf\xc7\xbe\x36\xde\xd6\x95\xf1\x78\x0b\x2e\x0e\xeb\x4d\x18\xcc\x9c\x6b\x3b\x0c\x88\xef\xc3\x60\xb5\x42\xc6\x78\xa2\x59\x42\xe8\xcf\xfd\xc9\x7d\x3d\x2f\x62\x14\xdb\x65\xf4\x97\xe8\xef\xdd\xf0\xa5\x1b\xbd\xc3\x3a\x00\x80\xa6\xc6\xf5\x17\xd8\x53\xcc\x74\xa6\xa6\x47\x75\xb2\x17\x3b\x18\x6f\xab\x6f\x6f\xd6\x1b\x14\x32\xcd\x99\xbc\xc7\x7b\xba\x7f\x35\x71\x2e\xa6\xb5\x50\x74\x54\xd3\x5c\xae\xb3\x6c\xae\xbb\xbe\x1b\xfc\xb3\x8d\xf1\xa1\xba\x35\xe7\xda\x76\xfb\xd9\x75\x17\x74\x9f\xe0\x1f\xed\x93\x2a\xb8\xb1\x6d\xcd\xf0\x63\x42\xb4\xd6\x9b\xda\x78\xf3\xdc\xc4\xda\x9e\xad\xb7\x35\x76\x42\x64\xc4\xf8\x22\x3f\x66\x59\x49\x33\xa4\x1f\x1f\xce\x8d\x7b\x7c\x21\xe8\x7a\x64\x95\xe6\x54\x2a\x96\x17\xea\xc3\xb2\x6e\x21\x4d\xf7\x9f\x49\x1f\x07\xfb\xe4\xcb\x4b\x29\xbf\x59\xf9\x7f\x4a\xb0\xb9\x39\xf8\x2b\x1a\x7f\x44\x07\x3b\x8a\x85\xa4\x40\x17\xfb\x29\x72\xfc\x66\x6a\x2c\x24\x88\x45\xef\x20\xc5\x01\x74\xa4\x48\x2b\x42\x21\x45\x44\x7b\x2d\xe9\x5f\x49\x0c\x83\x48\xe4\x79\xaa\xc2\x9f\x01\x00\x00\xff\xff\x71\x47\x89\xb3\xf8\x02\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0xf6, 0x2, 0xf2, 0xc1, 0x93, 0xb0, 0x9b, 0xd, 0x63, 0xa7, 0xa1, 0x97, 0x8d, 0x97, 0x1d, 0x88, 0x28, 0x47, 0x1d, 0x6f, 0xbd, 0xd8, 0xe8, 0x7, 0x2f, 0x15, 0x1a, 0x21, 0x72, 0xe, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql": _000001_init_schemaDownSql,
	"000001_init_schema.up.sql":   _000001_init_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql": {_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql":   {_000001_init_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
